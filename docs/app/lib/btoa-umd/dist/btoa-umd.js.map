{"version":3,"file":"btoa-umd.js","names":[],"mappings":"","sources":["btoa-umd.js"],"sourcesContent":["/*!\n* btoa-umd\n*\n* @link https://github.com/T1st3/btoa-umd\n* @author T1st3\n* @version 0.7.2\n* @license https://github.com/T1st3/btoa-umd/blob/master/LICENSE\n*\n*/\n\n/* global define */\n\n'use strict';\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // Node\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.Btoa = factory();\n  }\n}(this, function () {\n  /**\n  * btoa(), UMD style\n  * @module Btoa\n  * @namespace Btoa\n  */\n\n  /**\n  * @constructor\n  * @param {string} b\n  * @since 0.1.0\n  */\n  var Btoa = function (b) {\n    this.a = '';\n    this.b = '';\n    if (typeof define === 'function' && define.amd) {\n      this.browser = true;\n    } else if (typeof exports === 'object') {\n      this.browser = false;\n    } else {\n      this.browser = true;\n    }\n    // set method if supplied\n    if (b) {\n      this.handle(b);\n      return this;\n    }\n    // keep chainability\n    return this;\n  };\n\n  /**\n  * handle B to A\n  * @method handle\n  * @memberof Btoa\n  * @param {string} b\n  * @since 0.1.0\n  */\n  Btoa.prototype.handle = function (b) {\n    // Check a\n    if (!b || arguments.length === 0) {\n      // keep chainability\n      return this;\n    }\n    this.b = b;\n\n    var buffer;\n\n    if (this.browser === true) {\n      /* global window */\n      if (typeof window.btoa === 'function') {\n        this.a = window.btoa(b);\n      } else {\n        this.a = Btoa.encode(b);\n      }\n    } else {\n      if (b instanceof Buffer) {\n        buffer = b;\n      } else {\n        buffer = new Buffer(b.toString(), 'binary');\n      }\n      this.a = buffer.toString('base64');\n    }\n    // keep chainability\n    return this;\n  };\n\n  /**\n  * encode fix for browser which don't support btoa\n  * @method encode\n  * @memberof Btoa\n  * @param {string} b\n  * @since 0.2.0\n  */\n  Btoa.encode = function (b) {\n    if (!b || arguments.length === 0) {\n      return '';\n    }\n    var _byte = [],\n    _char = [],\n    _result = [],\n    j = 0, i = 0,\n    CHAR_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    /*jshint bitwise: false*/\n    for (i = 0; i < b.length; i += 3) {\n      _byte[0] = b.charCodeAt(i);\n      _byte[1] = b.charCodeAt(i + 1);\n      _byte[2] = b.charCodeAt(i + 2);\n      _char[0] = _byte[0] >> 2;\n      _char[1] = ((_byte[0] & 3) << 4) | (_byte[1] >> 4);\n      _char[2] = ((_byte[1] & 15) << 2) | (_byte[2] >> 6);\n      _char[3] = _byte[2] & 63;\n      if (isNaN(_byte[1])) {\n        _char[2] = _char[3] = 64;\n      } else if (isNaN(_byte[2])) {\n        _char[3] = 64;\n      }\n      _result[j++] = CHAR_MAP.charAt(_char[0]) +\n        CHAR_MAP.charAt(_char[1]) +\n        CHAR_MAP.charAt(_char[2]) +\n        CHAR_MAP.charAt(_char[3]);\n    }\n    return _result.join('');\n  };\n\n  return Btoa;\n}));\n"],"sourceRoot":"/source/"}